@model CGCWRegistration.Models.ViewModels.UserRegistrationViewModel


@using (Html.BeginForm("Register", "Registration", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<fieldset id="registrationForm">
    <legend>Registration Form</legend>

    <label>First Name:</label>
    <input type="text" v-model="user.firstName" />

    <label>Last Name:</label>
    <input type="text" v-model="user.lastName" />

    <label>Chinese Name:</label>
    <input type="text" v-model="user.chineseName" />

    <label>Sex:</label>
    <select v-model="user.sex">
        <option disabled value="">Select Gender</option>
        <option value="Male">Male</option>
        <option value="Female">Female</option>
        <option value="Other">Other</option>
    </select>

    <label>Occupation:</label>
    <input type="text" v-model="user.occupation" />

    <label>Age Range:</label>
    <select v-model="user.ageRangeID">
        <option disabled value="">Select Age Range</option>
        <option v-for="range in ageRanges" :value="range.Id">
            {{ range.Range }}
        </option>
    </select>

    <label>Phone Number</label>
    <input type="text" v-model="user.phoneNumber" />

    <label>Email:</label>
    <input type="text" v-model="user.email" />

    <label>Address:</label>
    <input type="text" v-model="user.address" />

    <label>Introduced By:</label>
    <input type="text" v-model="user.introducedBy" />

    <label>Existing Member?:</label>
    <select v-model="user.existingMember">
        <option value="Yes">Yes</option>
        <option value="No">No</option>
    </select>

    <h2>Select Languages:</h2>
    <div v-for="language in languages">
        <input type="checkbox" :value="language.Id" v-model="user.selectedLanguageIds">
        {{ language.Name }}
    </div>

    <h2>Questions:</h2>
    <div v-for="(question, qIndex) in questions" :key="question.QuestionId">
        <h4>{{ question.Question }}</h4>
        <div v-for="option in question.ResponseOptions" :key="option.Id">
            <input type="radio" v-model="user.responses[qIndex].ResponseId" :value="option.Id">
            {{ option.Response }}
        </div>
    </div>

    <input type="button" value="Register" @@click="submitForm" />
</fieldset>

}

<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    new Vue({
        el: '#registrationForm',
        data: {
            user: {
                firstName: '',
                lastName: '',
                chineseName: '',
                sex: '',
                occupation: '',
                ageRangeID: '',
                phoneNumber: '',
                email: '',
                address: '',
                introducedBy: '',
                existingMember: '',
                selectedLanguageIds: [],
                responses: []
            },
            ageRanges: [],
            languages: [],
            questions: []
        },
        mounted() {
            console.log("Component Mounted")
            this.fetchAgeRanges();
            this.fetchLanguages();
            this.fetchQuestions();
        },
        methods: {
            fetchAgeRanges() {
                axios.get('/ageranges')
                    .then(response => {
                        this.ageRanges = response.data;
                    })
                    .catch(error => {
                        console.error('Error fetching age ranges:', error);
                    });
            },
            fetchLanguages() {
                axios.get('/languages')
                    .then(response => {
                        this.languages = response.data;
                    })
                    .catch(error => {
                        console.error('Error fetching languages:', error);
                    });
            },
            fetchQuestions() {
                axios.get('/questions')
                    .then(response => {
                        this.questions = response.data;
                        this.initializeResponses();
                    })
                    .catch(error => {
                        console.error('Error fetching questions:', error);
                    });
            },
            initializeResponses() {
                this.user.responses = this.questions.map(question => ({
                    QuestionId: question.Id,
                    ResponseId: null
                }));
            },
            submitForm() {
                console.log("Submitting")
                axios.post('/Register', this.user)
                    .then(response => {
                        if (response.data.success) {
                            console.log(response.data.message);
                            this.resetForm();
                        } else {
                            console.lg
                            console.log(response.data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Submission error:', error);
                    });
            },
            resetForm() {
                console.log("Resetting form");
                this.user = {
                    firstName: '',
                    lastName: '',
                    chineseName: '',
                    sex: '',
                    occupation: '',
                    ageRangeID: '',
                    phoneNumber: '',
                    email: '',
                    address: '',
                    introducedBy: '',
                    existingMember: '',
                    selectedLanguageIds: [],
                    responses: this.user.responses.map(response => ({
                        QuestionId: response.QuestionId,
                        ResponseId: null
                    }))
                };
            }
        }
    });
</script>


